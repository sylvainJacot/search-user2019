{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nexport const TipProptypes = PropTypes.shape({\n  title: PropTypes.string,\n  code: PropTypes.string,\n  text: PropTypes.string,\n  id: PropTypes.number\n}).isRequired;\nexport const TipsProptypes = PropTypes.arrayOf(TipProptypes).isRequired;\nexport const Tip = [{\n  id: 0,\n  title: \"componentDidMount()\",\n  code: \"componentDidMount() { fetch('https://jsonplaceholder.typicode.com/users'), .then(response => response.json()).then(jsonfile => this.setState({users:jsonfile}))};\",\n  text: \"Cette méthode est appelée par React lui-même, pour récupérer les données depuis une API externe\"\n}, {\n  id: 1,\n  title: \"fetch()\",\n  code: \"fetch('https://jsonplaceholder.typicode.com/users')\",\n  text: \"Récupérer des ressources à travers le réseau de manière asynchrone.\"\n}, {\n  id: 2,\n  title: \"Destructuring Method\",\n  code: \"const {users, searchfield} = this.state;\",\n  text: \"à la place de 'const users = this.state.users','const searchfield = this.state.searchfield'\"\n}, {\n  id: 3,\n  title: \"onChange()\",\n  code: 'onchange={(e) => {this.setState({searchfield: e.target.value}, () => console.log(this.state));}',\n  text: \"écoute tous les changements sur l'élément\"\n}, {\n  id: 4,\n  title: \".filter()\",\n  code: \"const {users, searchfield} = this.state; const usersfiltered = users.filter(user =>user.name.toLowerCase().includes(searchfield.toLowerCase()));\",\n  text: \"usersfiltered est une fonction pour dire user.name inclue au moins des caractères de searchfield. Et les deux sont en lower case\"\n}, {\n  id: 5,\n  title: \".props\",\n  code: \"Dans le parent <h1>Bonjour, {this.props.name}</h1>, dans l'enfant <h1>Bonjour, {props.name}</h1>\",\n  text: \"« props » (qui signifie « propriétés ») contenant des données\"\n}, {\n  id: 6,\n  title: \".props\",\n  code: \"import PropTypes from 'prop-types';\\n\" + \"\\n\" + \"class Greeting extends React.Component {\\n\" + \"  render() {\\n\" + \"    return (\\n\" + \"      <h1>Bonjour, {this.props.name}</h1>\\n\" + \"    );\\n\" + \"  }\\n\" + \"}\\n\" + \"\\n\" + \"Greeting.propTypes = {\\n\" + \"  name: PropTypes.string\\n\" + \"};\",\n  text: \"To be continued...\"\n}];","map":{"version":3,"sources":["/Users/sylv/Desktop/Work/Jacot Studio/WEBSITE/WEB/Training/search-user/src/constants/what-i-have-learn-mock.js"],"names":["React","PropTypes","TipProptypes","shape","title","string","code","text","id","number","isRequired","TipsProptypes","arrayOf","Tip"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAGA,OAAO,MAAMC,YAAY,GAAGD,SAAS,CAACE,KAAV,CACxB;AACIC,EAAAA,KAAK,EAAEH,SAAS,CAACI,MADrB;AAEIC,EAAAA,IAAI,EAAEL,SAAS,CAACI,MAFpB;AAGIE,EAAAA,IAAI,EAAEN,SAAS,CAACI,MAHpB;AAIIG,EAAAA,EAAE,EAAEP,SAAS,CAACQ;AAJlB,CADwB,EAO1BC,UAPK;AASP,OAAO,MAAMC,aAAa,GAAIV,SAAS,CAACW,OAAV,CAAkBV,YAAlB,EAAgCQ,UAAvD;AAEP,OAAO,MAAMG,GAAG,GAAG,CACf;AACIL,EAAAA,EAAE,EAAE,CADR;AAEIJ,EAAAA,KAAK,EAAC,qBAFV;AAGIE,EAAAA,IAAI,EAAC,mKAHT;AAIIC,EAAAA,IAAI,EAAC;AAJT,CADe,EAOf;AACIC,EAAAA,EAAE,EAAE,CADR;AAEIJ,EAAAA,KAAK,EAAC,SAFV;AAGIE,EAAAA,IAAI,EAAC,qDAHT;AAIIC,EAAAA,IAAI,EAAC;AAJT,CAPe,EAaf;AACIC,EAAAA,EAAE,EAAE,CADR;AAEIJ,EAAAA,KAAK,EAAC,sBAFV;AAGIE,EAAAA,IAAI,EAAC,0CAHT;AAIIC,EAAAA,IAAI,EAAC;AAJT,CAbe,EAmBf;AACIC,EAAAA,EAAE,EAAE,CADR;AAEIJ,EAAAA,KAAK,EAAC,YAFV;AAGIE,EAAAA,IAAI,EAAC,iGAHT;AAIIC,EAAAA,IAAI,EAAC;AAJT,CAnBe,EAyBf;AACIC,EAAAA,EAAE,EAAE,CADR;AAEIJ,EAAAA,KAAK,EAAC,WAFV;AAGIE,EAAAA,IAAI,EAAC,kJAHT;AAIIC,EAAAA,IAAI,EAAC;AAJT,CAzBe,EA+Bf;AACIC,EAAAA,EAAE,EAAE,CADR;AAEIJ,EAAAA,KAAK,EAAC,QAFV;AAGIE,EAAAA,IAAI,EAAC,kGAHT;AAIIC,EAAAA,IAAI,EAAC;AAJT,CA/Be,EAqCf;AACIC,EAAAA,EAAE,EAAE,CADR;AAEIJ,EAAAA,KAAK,EAAC,QAFV;AAGIE,EAAAA,IAAI,EAAC,0CACD,IADC,GAED,4CAFC,GAGD,gBAHC,GAID,gBAJC,GAKD,6CALC,GAMD,UANC,GAOD,OAPC,GAQD,KARC,GASD,IATC,GAUD,0BAVC,GAWD,4BAXC,GAYD,IAfR;AAgBIC,EAAAA,IAAI,EAAC;AAhBT,CArCe,CAAZ","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const TipProptypes = PropTypes.shape(\n    {\n        title: PropTypes.string,\n        code: PropTypes.string,\n        text: PropTypes.string,\n        id: PropTypes.number\n    }\n).isRequired;\n\nexport const TipsProptypes =  PropTypes.arrayOf(TipProptypes).isRequired;\n\nexport const Tip = [\n    {\n        id: 0,\n        title:\"componentDidMount()\",\n        code:\"componentDidMount() { fetch('https://jsonplaceholder.typicode.com/users'), .then(response => response.json()).then(jsonfile => this.setState({users:jsonfile}))};\",\n        text:\"Cette méthode est appelée par React lui-même, pour récupérer les données depuis une API externe\"\n    },\n    {\n        id: 1,\n        title:\"fetch()\",\n        code:\"fetch('https://jsonplaceholder.typicode.com/users')\",\n        text:\"Récupérer des ressources à travers le réseau de manière asynchrone.\"\n    },\n    {\n        id: 2,\n        title:\"Destructuring Method\",\n        code:\"const {users, searchfield} = this.state;\",\n        text:\"à la place de 'const users = this.state.users','const searchfield = this.state.searchfield'\"\n    },\n    {\n        id: 3,\n        title:\"onChange()\",\n        code:'onchange={(e) => {this.setState({searchfield: e.target.value}, () => console.log(this.state));}',\n        text:\"écoute tous les changements sur l'élément\"\n    },\n    {\n        id: 4,\n        title:\".filter()\",\n        code:\"const {users, searchfield} = this.state; const usersfiltered = users.filter(user =>user.name.toLowerCase().includes(searchfield.toLowerCase()));\",\n        text:\"usersfiltered est une fonction pour dire user.name inclue au moins des caractères de searchfield. Et les deux sont en lower case\"\n    },\n    {\n        id: 5,\n        title:\".props\",\n        code:\"Dans le parent <h1>Bonjour, {this.props.name}</h1>, dans l'enfant <h1>Bonjour, {props.name}</h1>\",\n        text:\"« props » (qui signifie « propriétés ») contenant des données\"\n    },\n    {\n        id: 6,\n        title:\".props\",\n        code:\"import PropTypes from 'prop-types';\\n\" +\n            \"\\n\" +\n            \"class Greeting extends React.Component {\\n\" +\n            \"  render() {\\n\" +\n            \"    return (\\n\" +\n            \"      <h1>Bonjour, {this.props.name}</h1>\\n\" +\n            \"    );\\n\" +\n            \"  }\\n\" +\n            \"}\\n\" +\n            \"\\n\" +\n            \"Greeting.propTypes = {\\n\" +\n            \"  name: PropTypes.string\\n\" +\n            \"};\",\n        text:\"To be continued...\"\n    },\n]"]},"metadata":{},"sourceType":"module"}